{"version":3,"sources":["components/Button.js","components/ButtonPanel.js","components/Display.js","components/App.js","serviceWorker.js","index.js"],"names":["Button","name","type","className","ButtonPanel","Display","props","result","App","id","defaultProps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAIe,SAASA,EAAT,GAA2B,IAATC,EAAQ,EAARA,KAC/B,OACE,4BACEC,KAAK,SACLC,UAAU,gBAETF,GCNQ,SAASG,IACtB,OACE,yBAAKD,UAAU,eACb,yBAAKA,UAAU,YACb,kBAACH,EAAD,CAAQC,KAAK,OACb,kBAACD,EAAD,CAAQC,KAAK,QACb,kBAACD,EAAD,CAAQC,KAAK,MACb,kBAACD,EAAD,CAAQC,KAAK,UAEf,yBAAKE,UAAU,YACb,kBAACH,EAAD,CAAQC,KAAK,MACb,kBAACD,EAAD,CAAQC,KAAK,MACb,kBAACD,EAAD,CAAQC,KAAK,MACb,kBAACD,EAAD,CAAQC,KAAK,OAEf,yBAAKE,UAAU,cACb,kBAACH,EAAD,CAAQC,KAAK,MACb,kBAACD,EAAD,CAAQC,KAAK,MACb,kBAACD,EAAD,CAAQC,KAAK,MACb,kBAACD,EAAD,CAAQC,KAAK,OAEf,yBAAKE,UAAU,aACb,kBAACH,EAAD,CAAQC,KAAK,MACb,kBAACD,EAAD,CAAQC,KAAK,MACb,kBAACD,EAAD,CAAQC,KAAK,MACb,kBAACD,EAAD,CAAQC,KAAK,OAEf,yBAAKE,UAAU,aACb,kBAACH,EAAD,CAAQC,KAAK,MACb,kBAACD,EAAD,CAAQC,KAAK,MACb,kBAACD,EAAD,CAAQC,KAAK,QC9BN,SAASI,EAAQC,GAAQ,IAC9BC,EAAWD,EAAXC,OACR,OACE,yBAAKJ,UAAU,oBACZI,GCJQ,SAASC,IACtB,OACE,yBAAKL,UAAU,MAAMM,GAAG,iBACtB,kBAACJ,EAAD,CAASE,OAAO,OAChB,kBAACH,EAAD,OHWNJ,EAAOU,aAAe,CACpBT,KAAM,IEPRI,EAAQK,aAAe,CACrBH,OAAQ,KEDUI,QACW,cAA7BC,OAAOC,SAASC,UAEkB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAC1B,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACV,EAAD,OAEFW,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6601e657.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport default function Button({ name }) {\n  return (\n    <button\n      type=\"button\"\n      className=\"buttonSquare\"\n    >\n      {name}\n    </button>\n  );\n}\n\nButton.propTypes = {\n  name: PropTypes.string,\n};\n\nButton.defaultProps = {\n  name: '',\n};","import React from 'react';\nimport Button from './Button';\n\n\nexport default function ButtonPanel() {\n  return (\n    <div className=\"buttonPanel\">\n      <div className=\"groupOne\">\n        <Button name=\"AC\" />\n        <Button name=\"+/-\" />\n        <Button name=\"%\" />\n        <Button name=\"รท\" />\n      </div>\n      <div className=\"groupTwo\">\n        <Button name=\"7\" />\n        <Button name=\"8\" />\n        <Button name=\"9\" />\n        <Button name=\"X\" />\n      </div>\n      <div className=\"groupThree\">\n        <Button name=\"4\" />\n        <Button name=\"5\" />\n        <Button name=\"6\" />\n        <Button name=\"-\" />\n      </div>\n      <div className=\"groupFour\">\n        <Button name=\"1\" />\n        <Button name=\"2\" />\n        <Button name=\"3\" />\n        <Button name=\"+\" />\n      </div>\n      <div className=\"groupFive\">\n        <Button name=\"0\" />\n        <Button name=\".\" />\n        <Button name=\"=\" />\n      </div>\n    </div>\n  );\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport default function Display(props) {\n  const { result } = props;\n  return (\n    <div className=\"displayContainer\">\n      {result}\n    </div>\n  );\n}\n\nDisplay.defaultProps = {\n  result: '0',\n};\n\nDisplay.propTypes = {\n  result: PropTypes.string,\n};","import React from 'react';\nimport ButtonPanel from './ButtonPanel';\nimport Display from './Display';\n\nexport default function App() {\n  return (\n    <div className=\"App\" id=\"calculatorApp\">\n      <Display result=\"10\" />\n      <ButtonPanel />\n    </div>\n  );\n}","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}