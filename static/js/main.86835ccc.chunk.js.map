{"version":3,"sources":["components/Button.js","components/ButtonPanel.js","components/Display.js","logic/calculate.js","logic/operate.js","components/App.js","serviceWorker.js","index.js"],"names":["Button","name","color","wide","clickHandler","btnWidth","type","className","style","backgroundColor","width","onClick","defaultProps","ButtonPanel","props","handleClick","bind","buttonName","this","React","Component","Display","total","next","operation","calculate","calcObject","numbers","toString","length","numberOne","numberTwo","result","num1","BigJs","num2","plus","minus","times","eq","NaN","div","operate","includes","App","state","res","setState","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.86835ccc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport default function Button({\n  name, color, wide, clickHandler,\n}) {\n  const btnWidth = wide ? '50%' : '25%';\n  return (\n    <button\n      type=\"button\"\n      className=\"buttonSquare\"\n      style={{ backgroundColor: color, width: btnWidth }}\n      onClick={() => clickHandler(name)}\n    >\n      {name}\n    </button>\n  );\n}\n\nButton.propTypes = {\n  name: PropTypes.string,\n  color: PropTypes.string,\n  wide: PropTypes.bool,\n  clickHandler: PropTypes.func.isRequired,\n};\n\nButton.defaultProps = {\n  name: '',\n  wide: 'none',\n  color: 'none',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\n\n\nconst lightorange = 'none';\n\nexport default class ButtonPanel extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(buttonName) {\n    const { clickHandler } = this.props;\n    return clickHandler(buttonName);\n  }\n\n  render() {\n    return (\n      <div className=\"buttonPanel\">\n        <div className=\"groupOne\">\n          <Button wide={false} name=\"AC\" clickHandler={this.handleClick} />\n          <Button wide={false} name=\"+/-\" clickHandler={this.handleClick} />\n          <Button wide={false} name=\"%\" clickHandler={this.handleClick} />\n          <Button wide={false} color={lightorange} name=\"รท\" clickHandler={this.handleClick} />\n        </div>\n        <div className=\"groupTwo\">\n          <Button wide={false} name=\"7\" clickHandler={this.handleClick} />\n          <Button wide={false} name=\"8\" clickHandler={this.handleClick} />\n          <Button wide={false} name=\"9\" clickHandler={this.handleClick} />\n          <Button wide={false} color={lightorange} name=\"x\" clickHandler={this.handleClick} />\n        </div>\n        <div className=\"groupThree\">\n          <Button wide={false} name=\"4\" clickHandler={this.handleClick} />\n          <Button wide={false} name=\"5\" clickHandler={this.handleClick} />\n          <Button wide={false} name=\"6\" clickHandler={this.handleClick} />\n          <Button wide={false} color={lightorange} name=\"-\" clickHandler={this.handleClick} />\n        </div>\n        <div className=\"groupFour\">\n          <Button wide={false} name=\"1\" clickHandler={this.handleClick} />\n          <Button wide={false} name=\"2\" clickHandler={this.handleClick} />\n          <Button wide={false} name=\"3\" clickHandler={this.handleClick} />\n          <Button wide={false} color={lightorange} name=\"+\" clickHandler={this.handleClick} />\n        </div>\n        <div className=\"groupFive\">\n          <Button wide name=\"0\" clickHandler={this.handleClick} />\n          <Button wide={false} name=\".\" clickHandler={this.handleClick} />\n          <Button wide={false} color={lightorange} name=\"=\" clickHandler={this.handleClick} />\n        </div>\n      </div>\n    );\n  }\n}\n\nButtonPanel.propTypes = {\n  clickHandler: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport default function Display(props) {\n  const { total, next, operation } = props;\n  return (\n    <div className=\"displayContainer\">\n      {operation ? next : total}\n    </div>\n  );\n}\n\nDisplay.defaultProps = {\n  total: '0',\n  next: '0',\n  operation: '0',\n};\n\nDisplay.propTypes = {\n  total: PropTypes.string,\n  next: PropTypes.string,\n  operation: PropTypes.string,\n};\n","import operate from './operate';\n\nexport default function calculate(calcObject, buttonName) {\n  let { total, next, operation } = calcObject;\n  const symbols = ['-', '+', 'รท', 'x'];\n  const numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n\n  if (buttonName === 'AC') {\n    [total, next, operation] = [null, null, null];\n  }\n\n  if (buttonName === '+/-') {\n    if (total && next == null) {\n      total = (total * (-1)).toString();\n      next = null;\n    }\n    if (total && next) {\n      next = (next * (-1)).toString();\n    }\n  }\n\n  if (buttonName === '%') {\n    next = (0.01 * total).toString();\n    operation = '%';\n  }\n\n  if (buttonName === '.') {\n    if (total.length === 1) {\n      total += buttonName;\n    }\n  }\n\n  if (buttonName === '=') {\n    if (total && next && operation) {\n      total = operate(total, next, operation);\n      next = total;\n      operation = null;\n    }\n  }\n\n  if (symbols.includes(buttonName)) {\n    operation = buttonName;\n  } else if (operation && numbers.includes(buttonName)) {\n    next = next ? next + buttonName : buttonName;\n  } else if (numbers.includes(buttonName)) {\n    total = total ? total + buttonName : buttonName;\n  }\n\n  return { total, next, operation };\n}\n","import BigJs from 'big.js/big';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  let result = null;\n  const num1 = BigJs(numberOne);\n  const num2 = BigJs(numberTwo);\n\n  switch (operation) {\n    case '+':\n      result = num1.plus(num2).toString();\n      break;\n    case '-':\n      result = num1.minus(num2).toString();\n      break;\n    case 'x':\n      result = num1.times(num2).toString();\n      break;\n    case 'รท':\n      result = num2.eq(0) ? NaN : num1.div(num2).toString();\n      break;\n    default:\n      break;\n  }\n\n  return result;\n}\n","import React from 'react';\nimport ButtonPanel from './ButtonPanel';\nimport Display from './Display';\n\nimport calculate from '../logic/calculate';\n\nexport default class App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      total: null,\n      next: null,\n      operation: null,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(buttonName) {\n    const res = calculate(this.state, buttonName);\n    this.setState({ ...res });\n  }\n\n  render() {\n    const { total, next, operation } = this.state;\n    return (\n      <div className=\"App\" id=\"calculatorApp\">\n        <Display total={total || 0} next={next || 0} operation={operation} />\n        <ButtonPanel clickHandler={this.handleClick} />\n      </div>\n    );\n  }\n}\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}